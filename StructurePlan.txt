To-Do:
a. Move LSP printing to a separate command instead of printing every change
b. Fill in command to print LSP's
c. Write function to clear tentative and confirmed lists
d. If two nodes report the same node is down, then it's down fr
e. Ip module should use backup nextHop if nextHop is down
f. Keep an array length 20. value at index is strength of node. If it goes to 0, then don't send a node there.
    i. reset the list after a timeout. it's not permanent, just an emergency thing


1. Neighbor module 
    a. Sends NDP every 300 seconds
    b. Stores a list of tuples: [Neighbor, strength]
    c. Recieves NDP's and adds to list of neighbors
    d. Senses when all neighbors are found and calls Flooding
        i. Set timeout. Every change, reset the timeout
        ii. If timeout expires with no change, then call Flooding
    e. Need to detect change to neighbor list
        i. Call Flooding to send LSP
        ii. If recieving a NDP from neighbor not in list, then change
        iii. If a previous neighbor no longer responds, then change

2. Flooding module
    a. Is called from Neighbor and when node recieves a packet
    b. Checks cache, then sends to neighbors
    c. If this is an LSP, store in LSP module

3. Link-State module interface
    a. Something that stores LSP's 
    b. Set timeout. Every time an LSP is recieved, reset timeout.
        i. If timeout expires, call Dijkstra's
    c. Routing table: [Destination, Next Hop, Cost, Backup next hop, Backup cost]
    d. Function that uses Dijkstra's algo to populate Routing table
    e. Routing table should be accesible from other modules

4. IP module
    a. Stores an internal state - routingTableReady
    b. When Link-State module finishes, signal event
        i. Will need to either make new task or convert command to task
    c. When fired, routingTableReady becomes true
    d. In Node's ping, call IP.ping()
    e. in IP.ping(), check if Routing table is ready. If not, start a timer and come back 
    f. If it is ready, get the nextHop for the destination node and SimpleSend
    g. Upon recieving, call IP module just like with flooding.

1. Node has an array of sockets
    a. A socket is a random number (identifier) and a socket data structure
    b. Sockets are connections, not headers. A new socket is made for every destination.


Sockets:
    1. On cmdTestServer, open a socket to listen for connections (passive open)
        a. socket()
        b. bind()
        c. listen()
    2. On cmdTestClient, open a socket and attempt to make a connection (active open)
        a. socket()
        b. connection()
    3. If a node is trying to connect with you, accept the connection
        a. accept()

Three-Way Handshake
    1. Goal: Agree on two numbers
        a. Starting Sequence Numbers
        b. Next byte expected
    2. Send a SYN pack to start connection with random sequence number (x)
    3. When recieved, send a SYN+ACK with my own random sequence number (y) and ACK = x + 1
    4. When SYN+ACK is recieved, send ACK back w sequence number = x + 1 and ACK = y + 1


Accept() returns AFTER 3-Way handshake is finished.
Attempts to connect to this socket should be queued.
On accept, check the queue if there's any finished connection attempts

Goal: Complete connect() method. 
1. SimpleSend, Recieve, and makePack should be in Transport
2. The header information should include the Source Port, Destination Port, Sequence,
Acknowledgement, Flags, Advertised Window, Data

3. make new struct called TCPHeader with above fields.


typedef nx_struct pack{
	nx_uint16_t dest;
	nx_uint16_t src;
	nx_uint16_t seq;		//Sequence Number
	nx_uint8_t TTL;		//Time to Live
	nx_uint8_t protocol;
	nx_uint8_t payload[PACKET_MAX_PAYLOAD_SIZE];
}pack;


Recieve() will store seqnum, state, and node/Port into a cache
^ what is the bare minimum to store in the cache?
can use a 2d cache and store and seq num and port
accept will check cache and create socket



